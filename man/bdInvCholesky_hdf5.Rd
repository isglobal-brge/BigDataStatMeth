% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{bdInvCholesky_hdf5}
\alias{bdInvCholesky_hdf5}
\title{Compute inverse cholesky with hdf5 data files}
\usage{
bdInvCholesky_hdf5(
  filename,
  group,
  dataset,
  outdataset,
  outgroup = NULL,
  fullMatrix = NULL,
  force = NULL,
  threads = 2L,
  elementsBlock = 1000000L
)
}
\arguments{
\item{filename, }{character array with the name of an existin hdf5 data file containing the dataset to be modified}

\item{group, }{character array indicating the input group where the data set to be modified.}

\item{dataset, }{character array indicating the input dataset to be modified}

\item{outdataset}{character array with output dataset name where we want to store results}

\item{outgroup}{optional, character array with output group name where we want to 
store results if not provided then results are stored in the same group as original dataset}

\item{fullMatrix}{boolean, optional parameter, by default false. 
If fullMatrix = true, in the hdf5 file the complete matrix is stored. 
If false, only the lower triangular matrix is saved}

\item{force, }{optional boolean if true, previous results in same location inside 
hdf5 will be overwritten, by default force = false, data was not overwritten.}

\item{threads}{optional parameter. Integer with numbers of threads to be used}

\item{elementsBlock, }{optional integer defines de maximum number of elements 
to read from hdf5 data file in each block. By default this value is set 
to 10000. If matrix is bigger thant 5000x5000 then block is set to number 
of rows or columns x 2}
}
\value{
Original hdf5 data file with Inverse of Cholesky
}
\description{
Compute inverse cholesky with datasets stored in hdf5 data files
}
\examples{

library(BigDataStatMeth)
library(rhdf5)

set.seed(1234)
A  <- matrix(sample.int(10, 10000, replace = TRUE), ncol = 100)
A <- crossprod(A)

# Create hdf5 data file with  data (Y)
bdCreate_hdf5_matrix_file("test_file2.hdf5", A, "data", "A", force = TRUE)

# Get Inverse Cholesky
res <- bdInvCholesky_hdf5("test_file.hdf5", "data", "A", "results", 
                          "InverseA", force = TRUE)

}
