% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{bdcomputeMatrixVector_hdf5}
\alias{bdcomputeMatrixVector_hdf5}
\title{Apply vector calculus to a dataset in hdf5 file}
\usage{
bdcomputeMatrixVector_hdf5(
  filename,
  group,
  dataset,
  vectorgroup,
  vectordataset,
  outdataset,
  func,
  outgroup = NULL,
  byrows = NULL,
  paral = NULL,
  threads = NULL,
  force = FALSE
)
}
\arguments{
\item{filename}{string file name where dataset to apply weights is located}

\item{group}{string with the path inside the hdf5 data file where matrix 
is located}

\item{dataset}{string with the matrix name}

\item{vectorgroup}{string with the path inside the hdf5 data file where 
vector is located}

\item{vectordataset}{string with the vector name}

\item{outdataset}{character array with output dataset name where we want to 
store results}

\item{func, }{Character array, function to be applyed : 
"+" : to sum a vector to a matrix dataset by columns or rows
"-" : to substract a vector to a matrix dataset by columns or rows
"*" : to multiply a vector to a matrix dataset by columns or rows
"/" : to divide a vector to a matrix dataset by columns or rows}

\item{outgroup}{optional, character array with output group name where we 
want to store results if not provided then results are stored in the same 
group as original dataset}

\item{byrows}{logical (default = FALSE). By default weights are applied by 
columns but if byrows=TRUE then weights are applied by rows}

\item{paral, }{(optional, default = TRUE) if paral = TRUE performs parallel 
computation else performs seria computation}

\item{threads}{(optional) only if bparal = true, number of concurrent 
threads in parallelization if threads is null then threads =  maximum 
number of threads available}

\item{force, }{boolean if true, previous results in same location inside 
hdf5 will be overwritten.}
}
\value{
file with weighted dataset
}
\description{
This function applies a calculus with a vector to a matrix. Multiplies, 
sums, substract or divide each matrix row/column from a hdf5 dataset 
using a vector
}
\examples{
library(BigDataStatMeth)
   
# Prepare data and functions
set.seed(123)
Y <- matrix(rnorm(100), 10, 10)
X <- matrix(rnorm(10), 10, 1)
       
# Create hdf5 data file with  data (Y)
bdCreate_hdf5_matrix_file("test.hdf5", Y, "data", "Y", force = TRUE)
bdAdd_hdf5_matrix( X, "test.hdf5",  "data", "X", force = TRUE)
           
bdcomputeMatrixVector_hdf5("test.hdf5", 
                          group = "data", dataset = "Y",
                          vectorgroup = "data", vectordataset = "X", 
                          outdataset = "ProdComputed", 
                          func = "*",
                          byrows = TRUE, force = TRUE)
   
bdcomputeMatrixVector_hdf5("test.hdf5", 
                          group = "data", dataset = "Y",
                          vectorgroup = "data", vectordataset = "X", 
                          outdataset = "SumComputed", 
                          func = "-",
                          byrows = TRUE, force = TRUE)
   
bdcomputeMatrixVector_hdf5("test.hdf5", 
                          group = "data", dataset = "Y",
                          vectorgroup = "data", vectordataset = "X", 
                          outdataset = "SubsComputed", 
                          func = "-",
                          byrows = FALSE, force = TRUE)
}
