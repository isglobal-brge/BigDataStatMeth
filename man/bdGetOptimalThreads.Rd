% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{bdGetOptimalThreads}
\alias{bdGetOptimalThreads}
\title{Get I/O-aware thread recommendation}
\usage{
bdGetOptimalThreads(
  matrix_rows,
  matrix_cols,
  operation_type = "multiplication",
  max_threads = NULL,
  enable_storage_benchmark = FALSE
)
}
\arguments{
\item{matrix_rows}{Number of rows in your matrix}

\item{matrix_cols}{Number of columns in your matrix}

\item{operation_type}{Type of operation (default: "multiplication")}

\item{max_threads}{Maximum threads to consider (optional)}

\item{enable_storage_benchmark}{Enable storage benchmarking for accurate detection}
}
\value{
Integer with recommended thread count
}
\description{
Returns the optimal number of threads for your specific matrix size
and operation, considering I/O bottlenecks, storage characteristics,
and system constraints. This function performs the same analysis as
the internal optimization but returns the result without applying it.
}
\details{
The recommendation considers:
\itemize{
\item Storage I/O capacity (1 for HDD, 4 for SSD, 8 for NVMe)
\item I/O to computation ratio for the specific operation
\item System type (HPC cluster, server, desktop, container)
\item Memory constraints on large systems (>64 cores)
\item Job scheduler allocations (SLURM_CPUS_PER_TASK, PBS_NCPUS)
\item CRAN compliance requirements
\item Container resource limits (Docker, Singularity)
}
}
\note{
This function does not modify any OpenMP settings,
use bdConfigureIO() to apply the recommendations
}
\examples{
# Get recommendation for your workload
threads <- bdGetOptimalThreads(5000, 5000, "multiplication")
cat("Recommended threads:", threads, "\n")

# Limit maximum threads
threads <- bdGetOptimalThreads(10000, 10000, "svd", max_threads = 16)

# Enable accurate storage detection
threads <- bdGetOptimalThreads(5000, 5000, "multiplication", 
                              enable_storage_benchmark = TRUE)

# Use recommendation in manual configuration
# omp_set_num_threads(threads)
}
