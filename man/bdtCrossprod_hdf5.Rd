% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{bdtCrossprod_hdf5}
\alias{bdtCrossprod_hdf5}
\title{Transposed cross product with HDF5 matrices}
\usage{
bdtCrossprod_hdf5(
  filename,
  group,
  A,
  B = NULL,
  groupB = NULL,
  block_size = NULL,
  mixblock_size = NULL,
  paral = NULL,
  threads = NULL,
  outgroup = NULL,
  outdataset = NULL,
  overwrite = NULL
)
}
\arguments{
\item{filename}{String indicating the HDF5 file path}

\item{group}{String indicating the input group containing matrix A}

\item{A}{String specifying the dataset name for matrix A}

\item{B}{Optional string specifying dataset name for matrix B.
If NULL, performs A * A^t}

\item{groupB}{Optional string indicating group containing matrix B.
If NULL, uses same group as A}

\item{block_size}{Optional integer specifying the block size for processing.
Default is automatically determined based on matrix dimensions}

\item{mixblock_size}{Optional integer for memory block size in parallel processing}

\item{paral}{Optional boolean indicating whether to use parallel processing.
Default is false}

\item{threads}{Optional integer specifying number of threads for parallel processing.
If NULL, uses maximum available threads}

\item{outgroup}{Optional string specifying output group.
Default is "OUTPUT"}

\item{outdataset}{Optional string specifying output dataset name.
Default is "tCrossProd_A_x_B"}

\item{overwrite}{Optional boolean indicating whether to overwrite existing datasets.
Default is false}
}
\value{
Modifies the HDF5 file in place, adding the transposed cross product result
}
\description{
Performs optimized transposed cross product operations on matrices stored in
HDF5 format. For a single matrix A, computes A * A^t. For two matrices A and B,
computes A * B^t. Uses block-wise processing for memory efficiency.
}
\details{
The function implements block-wise matrix multiplication to handle large matrices
efficiently. Block size is automatically optimized based on:
\itemize{
\item Available memory
\item Matrix dimensions
\item Whether parallel processing is enabled
}

For parallel processing:
\itemize{
\item Uses OpenMP for thread management
\item Implements cache-friendly block operations
\item Provides automatic thread count optimization
}

Memory efficiency is achieved through:
\itemize{
\item Block-wise reading and writing
\item Minimal temporary storage
\item Proper resource cleanup
}

Mathematical operations:
\itemize{
\item For single matrix A: computes A * A^t
\item For two matrices A, B: computes A * B^t
\item Optimized for numerical stability
}
}
\examples{
\dontrun{
library(BigDataStatMeth)
library(rhdf5)

# Create test matrix
N <- 1000
M <- 1000
set.seed(555)
a <- matrix(rnorm(N*M), N, M)

# Save to HDF5
bdCreate_hdf5_matrix("test.hdf5", a, "INPUT", "A",
                     overwriteFile = TRUE)

# Compute transposed cross product
bdtCrossprod_hdf5("test.hdf5", "INPUT", "A",
                  outgroup = "OUTPUT",
                  outdataset = "result",
                  block_size = 1024,
                  paral = TRUE,
                  threads = 4)
}

}
