#ifndef BIGDATASTATMETH_HDF5_DATASETS_HPP
#define BIGDATASTATMETH_HDF5_DATASETS_HPP

#include "BigDataStatMeth.hpp"
#include "Utilities/Utilities.hpp"
#include "hdf5Utilities/hdf5Utilities.hpp"



namespace BigDataStatMeth {

class hdf5Dataset : public hdf5Group 
{
    
public:

    hdf5Dataset(H5::H5File* file, std::string group, std::string datasetname, bool overwrite) : 
    hdf5Group(file, group)
    {
        groupname = group;
        name = datasetname;
        boverwrite = overwrite;
    }
    
    hdf5Dataset(H5::H5File* file, std::string dataset, bool overwrite) : 
        hdf5Group(file, SplitElementName(dataset).path)
    {
        fullpath datasetroute = SplitElementName(dataset);
        name = datasetroute.filename;
        boverwrite = overwrite;
    }
    
    hdf5Dataset(BigDataStatMeth::hdf5File* oFile, std::string group, std::string datasetname, bool overwrite) : 
    hdf5Group(oFile, group)
    {
        groupname = group;
        name = datasetname;
        boverwrite = overwrite;
    }
    
    // Create empty hdf5 DataSet, strdatatype can be: 
    //  . int: integer dataset
    //  . numeric: double dataset
    //  . string: string dataset
    void createDataset(size_t rows, size_t cols, std::string strdatatype) 
    {
        try
        {
            typedef struct names {
                char chr[MAXSTRING];
            } names;
            
            //..// H5::Exception::dontPrint();
            std::string fullDatasetPath = groupname + "/" + name;
            
            // dataset dimensions
            dimDataset[0] = rows;
            dimDataset[1] = cols;
            
            H5::DataSpace dataspace( RANK2, dimDataset );
            
            if( !exists_HDF5_element(pfile, groupname) ) {
                create_HDF5_groups(groupname);
            }
            
            if( exists_HDF5_element(pfile, fullDatasetPath) && boverwrite == false) {
                Rcpp::Rcout<<"Dataset exits, please set overwrite = true to overwrite the existing dataset \n";
            } else {
                type = strdatatype;
                
                if( strdatatype == "string") {
                    // Create the memory datatype.
                    H5::CompType mtype(sizeof(names));
                    mtype.insertMember("chr", HOFFSET(names, chr), H5::StrType(H5::PredType::C_S1, MAXSTRING ));
                    pdataset = new H5::DataSet(pfile->createDataSet(fullDatasetPath, mtype, dataspace));
                } else if( strdatatype == "int") {
                    H5::IntType datatype( H5::PredType::NATIVE_INT );
                    pdataset = new H5::DataSet(pfile->createDataSet( fullDatasetPath, datatype, dataspace ));
                } else if( strdatatype == "numeric" || strdatatype == "real") {
                    H5::IntType datatype( H5::PredType::NATIVE_DOUBLE ); 
                    pdataset = new H5::DataSet(pfile->createDataSet( fullDatasetPath, datatype, dataspace ));
                } else {
                    ::Rf_error( "Dataset data type not allowed (writeDatasetBlock)" );
                }
            }
            
            dataspace.close();
            
        } catch(H5::FileIException& error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception createDataset (File IException) " );
        } catch(H5::GroupIException error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception createDataset (File IException) " );
        } catch(H5::DataSetIException error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception createDataset (File IException) " );
        } 
        return void();
    }
    
    
    // Create empty hdf5 data file
    void createUnlimitedDataset(size_t rows, size_t cols, std::string strdatatype) 
    {
        try
        {
            //..// H5::Exception::dontPrint();
            
            herr_t status;
            hid_t cparms; 
            std::string fullDatasetPath = groupname + "/" + name;
            
            // dataset dimensions
            dimDataset[0] = rows;
            dimDataset[1] = cols;
            
            // set dataset as unlimited;
            unlimited = true;
            
            // Declare unlimited dimensions
            hsize_t  maxdims[2] = {H5S_UNLIMITED, H5S_UNLIMITED};
            H5::DataSpace dataspace ( RANK2, dimDataset, maxdims );
            
            // Enabling chunking
            hsize_t chunk_dims[2];
            chunk_dims[0] = rows;
            chunk_dims[1] = cols;
            
            cparms = H5Pcreate(H5P_DATASET_CREATE);
            status = H5Pset_chunk( cparms, RANK2, chunk_dims);
            
            if( !exists_HDF5_element(pfile, groupname) ) {
                create_HDF5_groups(groupname);
            }
            
            if( exists_HDF5_element(pfile, fullDatasetPath) && boverwrite == false) {
                Rcpp::Rcout<<"\n Dataset exits, please set overwrite = true to overwrite data \n";
            } else {
                // Create dataset
                if( strdatatype == "int") {
                    H5::IntType datatype( H5::PredType::NATIVE_INT );
                    pdataset = new H5::DataSet(pfile->createDataSet( fullDatasetPath, datatype, dataspace, cparms));
                } else {
                    H5::IntType datatype( H5::PredType::NATIVE_DOUBLE ); 
                    pdataset = new H5::DataSet(pfile->createDataSet( fullDatasetPath, datatype, dataspace, cparms));
                }
            }
            
            dataspace.close();
            
        } catch(H5::FileIException& error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception createUnlimitedDataset (File IException) " );
            return void();
        } catch(H5::GroupIException error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception createUnlimitedDataset (File IException) " );
            return void();
        } catch(H5::DataSetIException error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception createUnlimitedDataset (File IException) " );
            return void();
        } 
        return void();
    }
    
    
    void extendUnlimitedDataset(const size_t rows, const size_t cols)
    {
        try
        {
            if(unlimited == true) {
                //..// H5::Exception::dontPrint();
                
                // Extend dataset size to:  oldDims + newDims
                hsize_t newdims[2];
                newdims[0] = rows;
                newdims[1] = cols;
                
                hsize_t size[2];
                dimDataset[0] = dimDataset[0] + newdims[0];
                dimDataset[1] = dimDataset[1] + newdims[1];
                
                pdataset->extend( dimDataset );    
            } else {
                Rcpp::Rcout<<"\n Dataset is not an unlimited dataset, fixed datasets can't be extended\n";
                return void();
            }
            
        } catch(H5::FileIException& error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception extend_HDF5_matrix_subset_ptr (File IException)" );
            return void();
        } catch(H5::DataSetIException& error) { // catch failure caused by the DataSet operations
            ::Rf_error( "c++ exception extend_HDF5_matrix_subset_ptr (DataSet IException)" );
            return void();
        }
        return void();
    }
    
    
    // Open an existing hdf5 dataSet
    H5::DataSet* openDataset()
    {
        try
        {
            //..// H5::Exception::dontPrint();
            std::string fullPath = groupname + "/" + name;
            
            if ((pdataset == NULL) == TRUE) {
                pdataset = new H5::DataSet(pfile->openDataSet(fullPath));    
            }
            
        } catch(H5::FileIException& error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception hdf5File (File IException) " );
        } catch(H5::GroupIException error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception hdf5Dataset (File IException) " );
        } catch(H5::DataSetIException error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception hdf5Dataset (File IException) " );
        } 
        return(pdataset);
    }
    
    
    
    // Write data in existing hdf5 dataSet - Only writes data if the size of existing hdf5 dataset
    // is equal to input data (size)
    void writeDataset( Rcpp::RObject DatasetValues )
    {
        
        try
        {
            // //..// H5::Exception::dontPrint();
            typedef struct names {
                char chr[MAXSTRING];
            } names;
            
            // Create the data space for the dataset.
            std::vector<int> dims;
            
            if(Rcpp::is<Rcpp::NumericMatrix>(DatasetValues) || Rcpp::is<Rcpp::IntegerMatrix>(DatasetValues)) {
                if( Rcpp::as<Rcpp::NumericMatrix>(DatasetValues).nrow() == dimDataset[0] && Rcpp::as<Rcpp::NumericMatrix>(DatasetValues).ncol() == dimDataset[1])
                {
                    H5::DataSpace dataspace(RANK2, dimDataset);
                    
                    std::vector<double> matHiCValues = Rcpp::as<std::vector<double> >(Rcpp::as<Rcpp::NumericMatrix>(DatasetValues));
                    pdataset->write( &matHiCValues[0] , H5::PredType::NATIVE_DOUBLE);
                    dataspace.close();
                } else {
                    Rcpp::Rcout<<"\n Data you are trying to write a complete dataset that differs from existing hdf5 dataset size\n";
                    return void();
                }
                
            } else if(Rcpp::is<Rcpp::NumericVector>(DatasetValues) || Rcpp::is<Rcpp::IntegerVector>(DatasetValues)) {
                
                hsize_t dims[] = {dimDataset[1]};
                H5::DataSpace dataspace(RANK1, dims);
                
                if(Rcpp::is<Rcpp::IntegerVector>(DatasetValues) || Rcpp::is<Rcpp::LogicalVector>(DatasetValues) ) {
                    std::vector<int> vectHiCValues = Rcpp::as<std::vector<int> >(DatasetValues);
                    pdataset->write( vectHiCValues.data() , H5::PredType::NATIVE_INT);
                } else if(Rcpp::is<Rcpp::NumericVector>(DatasetValues) )  {
                    std::vector<double> vectHiCValues = Rcpp::as<std::vector<double> >(DatasetValues);
                    pdataset->write( vectHiCValues.data() , H5::PredType::NATIVE_DOUBLE);
                } 
                dataspace.close();
            } else if(Rcpp::is<Rcpp::StringVector >(DatasetValues)) {
                
                // Create the memory datatype.
                H5::CompType mtype(sizeof(names));
                mtype.insertMember("chr", HOFFSET(names, chr), H5::StrType(H5::PredType::C_S1, MAXSTRING ));
                
                hsize_t hsStride[2] = {1, 1}, 
                        hsBlock[2] = {1, 1};
                
                hsize_t dims[] = { dimDataset[0] * dimDataset[1] };
                // Get dataspace for the dataset
                H5::DataSpace dataspace(RANK1, dims);
                dataspace = pdataset->getSpace();
                
                int vectorsize = dimDataset[1];
                
                if( vectorsize > MAXSTRBLOCK) {
                    // Number of blocks to process
                    int iblocsks = vectorsize/MAXSTRBLOCK;
                    
                    for(int i=0; i<=iblocsks; i++) {
                        
                        hsize_t ilength = MAXSTRBLOCK;
                        if(i == iblocsks) { // Gets block size to read
                            ilength = vectorsize - (i * MAXSTRBLOCK);
                        }
                        
                        names *names_list = new names[ilength]; // Convert Dataframe to range list
                        
                        for(int row=0; row< ilength; row++ ) {
                            Rcpp::String wchrom = Rcpp::as<Rcpp::StringVector>(DatasetValues)((i*MAXSTRBLOCK) + row);
                            std::string word = wchrom.get_cstring();
                            
                            int j = 0;
                            for( j = 0; j < word.size() && j < (MAXSTRING-1); j++ ){
                                names_list[row].chr[j] = word[j]; 
                            }
                            names_list[row].chr[j] = '\0'; // insert hdf5 end of string
                        }
                        
                        hsize_t hsStart[] = {(i*MAXSTRBLOCK)};
                        hsize_t hsCount[] = {ilength};
                        
                        Rcpp::Rcout<<"\nEstem al cod+ modificat?? ... Creem el memspace\n";
                        H5::DataSpace memspace(RANK1, hsCount, NULL);
                        Rcpp::Rcout<<"\nEstem al cod+ modificat?? ... FI creació memspace, variables valen: count"<< hsCount<<"\n";
                        
                        Rcpp::Rcout<<"Variables count: "<< hsCount[0]<<"\n";
                        Rcpp::Rcout<<"Variables start: "<< hsStart[0]<<"\n";
                        Rcpp::Rcout<<"Variables Names_list: "<< *names_list[0].chr<<"\n";
                        Rcpp::Rcout<<"Variables Names_list: "<< *names_list[1].chr<<"\n";
                        Rcpp::Rcout<<"Variables Dims: "<< dims[0]<<" x "<< dims[1]<<"\n";
                        Rcpp::Rcout<<"Variables dimDataset: "<< dimDataset<<" x "<< dimDataset[1]<<"\n";
                        
                        // Get position and write data in dataset
                        Rcpp::Rcout<<"... Seleccionem hyperslab\n";
                        dataspace.selectHyperslab(H5S_SELECT_SET, hsCount, hsStart, hsStride, hsBlock); 
                        Rcpp::Rcout<< "... Escriu hyperslab\n";
                        pdataset->write(names_list, mtype, memspace, dataspace);
                        Rcpp::Rcout<<"\n... FI escriure hyperslab\n";
                        
                        // Release resources
                        delete[] names_list;
                        memspace.close();
                    }
                } else {

                    int datarows = Rcpp::as<Rcpp::StringVector>(DatasetValues).size();
                    names *names_list = new names[datarows]; // Convert Dataframe to range list
                    
                    for( int i = 0; i < datarows; i++ ) {
                        //..// name n;
                        Rcpp::String wchrom = Rcpp::as<Rcpp::StringVector>(DatasetValues)(i);
                        std::string word = wchrom.get_cstring();
                        
                        int j = 0;
                        for( j = 0; j < word.size() && j < (MAXSTRING-1); j++ ) {
                            names_list[i].chr[j] = word[j]; }
                        
                        // names_list[i % dims[1]].chr[j] = '\0'; // insert hdf5 end of string
                        names_list[i].chr[j] = '\0'; // insert hdf5 end of string
                    }
                    pdataset->write(names_list, mtype);
                    delete[] names_list;
                    // dataspace.close();
                }
            } else {
                ::Rf_error( "Matrix data type not allowed (writeDataset)" );
            }
            
        } catch(H5::FileIException error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception writeDataset (File IException)" );
            // return void();
        } catch(H5::DataSetIException error) { // catch failure caused by the DataSet operations
            ::Rf_error( "c++ exception writeDataset (DataSet IException)" );
            // return void();
        } catch(H5::GroupIException error) { // catch failure caused by the Group operations
            ::Rf_error( "c++ exception writeDataset (Group IException)" );
            // return void();
        } catch(H5::DataSpaceIException& error) { // catch failure caused by the DataSpace operations
            ::Rf_error( "c++ exception writeDataset (DataSpace IException)" );
            // return void();
        } catch(H5::DataTypeIException error) { // catch failure caused by the DataSpace operations
            ::Rf_error( "c++ exception writeDataset (Data TypeIException)" );
            // return void();
        }
        return void();
    }
    
    
    // Write data in existing hdf5 dataSet - Writes a block inside a hdf5 
    // dataset starting at offset position x-y 
    void writeDatasetBlock( Rcpp::RObject DatasetValues, Rcpp::IntegerVector vOffset,
                     Rcpp::IntegerVector vStride, Rcpp::IntegerVector vBlock)
    {
        try
        {
            // Turn off the auto-printing when failure occurs so that we can handle the errors appropriately
            //..// H5::Exception::dontPrint();
            
            hsize_t hsOffset[2], hsCount[2], hsStride[2], hsBlock[2];
            
            // Specify size and shape of subset to write
            hsOffset[0] = vOffset(0); hsOffset[1] = vOffset(1);
            hsStride[0] = vStride(0); hsStride[1] = vStride(1); // default 1
            hsBlock[0] = vBlock(0); hsBlock[1] = vBlock(1); // default 1
            
            if(Rcpp::is<Rcpp::NumericMatrix>(DatasetValues) || Rcpp::is<Rcpp::IntegerMatrix>(DatasetValues) ||
               Rcpp::is<Rcpp::NumericVector>(DatasetValues) || Rcpp::is<Rcpp::IntegerVector>(DatasetValues) ) {
                
                if(Rcpp::is<Rcpp::NumericMatrix>(DatasetValues) || Rcpp::is<Rcpp::IntegerMatrix>(DatasetValues)) {
                    hsCount[0] = Rcpp::as<Rcpp::NumericMatrix>(DatasetValues).rows();
                    hsCount[1] = Rcpp::as<Rcpp::NumericMatrix>(DatasetValues).cols();
                } else if(Rcpp::is<Rcpp::NumericVector>(DatasetValues) || Rcpp::is<Rcpp::IntegerVector>(DatasetValues)) {
                    hsCount[0] = 1;
                    hsCount[1] = Rcpp::as<Rcpp::NumericVector>(DatasetValues).length();
                }
                
                if(vOffset(0) + hsCount[0] <= dimDataset[0] || vOffset(1) + hsCount[1] <= dimDataset[1]) {
                    H5::DataSpace dataspace(RANK2, hsCount);
                    H5::DataSpace memspace(RANK2, hsCount, NULL);
                    
                    dataspace = pdataset->getSpace();
                    dataspace.selectHyperslab( H5S_SELECT_SET, hsCount, hsOffset, hsStride, hsBlock); 
                    
                    if(Rcpp::is<Rcpp::NumericMatrix>(DatasetValues) || Rcpp::is<Rcpp::IntegerMatrix>(DatasetValues)) {
                        std::vector<double> matdata = Rcpp::as<std::vector<double> >(transpose(Rcpp::as<Rcpp::NumericMatrix>(DatasetValues)));
                        pdataset->write(&matdata[0], H5::PredType::NATIVE_DOUBLE, memspace, dataspace);
                        dataspace.close();
                    } else if(Rcpp::is<Rcpp::NumericVector>(DatasetValues) || Rcpp::is<Rcpp::IntegerVector>(DatasetValues)) {
                        std::vector<double> matdata = Rcpp::as<std::vector<double> >(Rcpp::as<Rcpp::NumericVector>(DatasetValues));
                        pdataset->write(&matdata[0], H5::PredType::NATIVE_DOUBLE, memspace, dataspace);
                        dataspace.close();  
                    } 
                } else {
                    ::Rf_error( "It is not possible to write block in current position (writeDatasetBlock)" );
                }
            } else {
                ::Rf_error( "Matrix data type not allowed (writeDatasetBlock)" );
            }
            
        } catch(H5::FileIException& error) { // catch failure caused by the H5File operations
            ::Rf_error( "c++ exception writeDatasetBlock (File IException)" );
            return void();
        } catch(H5::DataSetIException& error) { // catch failure caused by the DataSet operations
            ::Rf_error( "c++ exception writeDatasetBlock (DataSet IException)" );
            return void();
        } catch(H5::GroupIException& error) { // catch failure caused by the Group operations
            ::Rf_error( "c++ exception writeDatasetBlock (Group IException)" );
            return void();
        } catch(H5::DataSpaceIException& error) { // catch failure caused by the DataSpace operations
            ::Rf_error( "c++ exception writeDatasetBlock (DataSpace IException)" );
            return void();
        } catch(H5::DataTypeIException& error) { // catch failure caused by the DataSpace operations
            ::Rf_error( "c++ exception writeDatasetBlock (Data TypeIException)" );
            return void();
        }
        return void();
    }
    
    
    
    H5::DataSet* getDatasetptr() { return(pdataset); }  // Return dataset pointer
    std::string getDatasetName() { return(name); }  // Return dataset name
    std::string getGroup() { return(getGroupName()); }  // Return group name
    hsize_t nrows() { return(dimDataset[0]); }  // Return number of rows
    hsize_t ncols() { return(dimDataset[1]); }  // Return number of columns
    hsize_t* dim() { return(dimDataset); }  // Return dataset dimension (rows x columns)
    
    // Destructor
    ~hdf5Dataset(){
        Rcpp::Rcout<<"\nDataset destroyed";
        if(pdataset){
            pdataset->close();    
        }
    }
    
    
private:
    
    // Variables declaration
    std::string name;
    std::string type;
    bool boverwrite;
    H5::DataSet* pdataset = nullptr;
    hsize_t dimDataset[2];
    bool unlimited = false;
    
    
    // Function declarations
    
    void close_dataset() {
        pdataset->close();
    }
    
    
    void convert_DataFrame_to_RangeList() {
        
    }
    
};
}

#endif // BIGDATASTATMETH_HDF5_DATASETS_HPP